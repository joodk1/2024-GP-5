# -*- coding: utf-8 -*-
"""face_detect.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CL5SkvA7L4nakkVv43HW1xzAjahc4bOQ
"""

import os
import cv2
import dlib


detector = dlib.get_frontal_face_detector()

videos_with_multiple_faces = []

def detect_faces_in_video(video_folder_path, output_folder_path):
    print("Processing video folder:", video_folder_path)
    for frame_file in sorted(os.listdir(video_folder_path)):
        frame_path = os.path.join(video_folder_path, frame_file)
        print("Processing frame:", frame_path)
        frame = cv2.imread(frame_path)
        if frame is None:
            print("Error: Could not read frame:", frame_file)
            continue

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        faces = detector(gray)
        if len(faces) > 0:
            print("Found", len(faces), "faces in frame:", frame_file)
            if len(faces) > 1:
                videos_with_multiple_faces.append(video_folder_path)
            for i, face in enumerate(faces):
                x, y, w, h = face.left(), face.top(), face.width(), face.height()
                print("Face coordinates:", x, y, w, h)
                if x >= 0 and y >= 0 and x + w <= frame.shape[1] and y + h <= frame.shape[0]:
                    face_image = frame[y:y+h, x:x+w]
                    if not face_image.size == 0:
                        output_file_path = os.path.join(output_folder_path, frame_file[:-4] + '_' + str(i) + '.jpg')
                        cv2.imwrite(output_file_path, face_image)
                    else:
                        print("Error: Detected face is empty in frame:", frame_file)
                else:
                    print("Error: Detected face out of bounds in frame:", frame_file)
        else:
            print("No faces found in frame:", frame_file)

dataset_path = "/content/drive/MyDrive/Dataset_Frames"


train_path = os.path.join(dataset_path, "Train")
for label in os.listdir(train_path):
    label_path = os.path.join(train_path, label)
    for video_folder in os.listdir(label_path):
        video_folder_path = os.path.join(label_path, video_folder)
        output_folder_path = os.path.join("/content/drive/MyDrive/Train_Faces", label, video_folder)
        os.makedirs(output_folder_path, exist_ok=True)
        detect_faces_in_video(video_folder_path, output_folder_path)


test_path = os.path.join(dataset_path, "Test")
for label in os.listdir(test_path):
    label_path = os.path.join(test_path, label)
    for video_folder in os.listdir(label_path):
        video_folder_path = os.path.join(label_path, video_folder)
        output_folder_path = os.path.join("/content/drive/MyDrive/Test_Faces", label, video_folder)
        os.makedirs(output_folder_path, exist_ok=True)
        detect_faces_in_video(video_folder_path, output_folder_path)


if len(videos_with_multiple_faces) > 0:
    print("\nVideos with more than one face detected:")
    for video_path in videos_with_multiple_faces:
        print(video_path)
else:
    print("\nNo videos with more than one face detected.")

import os
import cv2
import dlib

# Create face detector and load pre-trained face detection model
detector = dlib.get_frontal_face_detector()

def detect_faces_in_video(video_folder_path):
    print("Processing video folder:", video_folder_path)
    frames_with_multiple_faces = 0  # Counter for frames with multiple faces
    for frame_file in sorted(os.listdir(video_folder_path)):
        frame_path = os.path.join(video_folder_path, frame_file)
        frame = cv2.imread(frame_path)
        if frame is None:
            print("Error: Could not read frame:", frame_file)
            continue

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        # Detect faces in the grayscale frame
        faces = detector(gray)
        if len(faces) > 1:
            print("Found", len(faces), "faces in frame:", frame_file)
            frames_with_multiple_faces += 1

    if frames_with_multiple_faces > 0:
        print("Frames with multiple faces:", frames_with_multiple_faces)

# Specify the path to the dataset folder
dataset_path = "/content/drive/MyDrive/Dataset_Final"

# Process train data
train_path = os.path.join(dataset_path, "Train")
for label in os.listdir(train_path):
    label_path = os.path.join(train_path, label)
    for video_folder in os.listdir(label_path):
        video_folder_path = os.path.join(label_path, video_folder)
        detect_faces_in_video(video_folder_path)

# Process test data
test_path = os.path.join(dataset_path, "Test")
for label in os.listdir(test_path):
    label_path = os.path.join(test_path, label)
    for video_folder in os.listdir(label_path):
        video_folder_path = os.path.join(label_path, video_folder)
        detect_faces_in_video(video_folder_path)